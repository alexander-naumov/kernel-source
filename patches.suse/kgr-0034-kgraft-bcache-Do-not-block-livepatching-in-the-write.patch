From: Petr Mladek <pmladek@suse.com>
Date: Tue, 19 Apr 2016 17:12:19 +0200
Subject: kgraft/bcache: Do not block livepatching in the writeback thread for
 too long
Patch-mainline: not yet, kgraft
References: fate#313296

The writeback kthread waits 30 sec by default when the full search
has finished. The sleeping cycle is a safe location for the migration
and we should do so there.

There is a similar sleeping cycle in the read_dirty() function.
But it is not clear that it is a safe location for the migration.
There is called bch_keybuf_next() before. Fortunately, the delay
is one second at maximum, so we could leave it as is.

On the other hand, the main cycle calls try_to_freeze() only
when there are no dirty data. It might take some time until
it happens. And it should be safe to migrate the kthread in
every cycle before calling down_write(). At least, it should
not be more dangerous than migrating the thread during the
30 sec long sleep or inside the read_dirty() call.

Reported-by: Miroslav Benes <mbenes@suse.cz>
Signed-off-by: Petr Mladek <pmladek@suse.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 drivers/md/bcache/writeback.c |    5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

--- a/drivers/md/bcache/writeback.c
+++ b/drivers/md/bcache/writeback.c
@@ -444,6 +444,7 @@ static int bch_writeback_thread(void *ar
 	bch_ratelimit_reset(&dc->writeback_rate);
 
 	while (!kthread_should_stop()) {
+		klp_kgraft_mark_task_safe(current);
 		down_write(&dc->writeback_lock);
 		if (!atomic_read(&dc->has_dirty) ||
 		    (!test_bit(BCACHE_DEV_DETACHING, &dc->disk.flags) &&
@@ -477,8 +478,10 @@ static int bch_writeback_thread(void *ar
 
 			while (delay &&
 			       !kthread_should_stop() &&
-			       !test_bit(BCACHE_DEV_DETACHING, &dc->disk.flags))
+			       !test_bit(BCACHE_DEV_DETACHING, &dc->disk.flags)) {
+				klp_kgraft_mark_task_safe(current);
 				delay = schedule_timeout_interruptible(delay);
+			}
 
 			bch_ratelimit_reset(&dc->writeback_rate);
 		}
