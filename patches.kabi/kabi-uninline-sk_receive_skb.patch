From: Michal Kubecek <mkubecek@suse.cz>
Date: Tue, 13 Mar 2018 17:40:56 +0100
Subject: kabi: uninline sk_receive_skb()
Patch-mainline: Never, kabi workaround
References: bsc#1042286

Mainline commit 7243f794c490 changes sk_receive_skb() into an inline
wrapper for newly introduced __sk_receive_skb(). As the function was
exported, we need to preserve it as (not inlined) exported symbol.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 include/net/sock.h | 6 +-----
 net/core/sock.c    | 6 ++++++
 2 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/include/net/sock.h b/include/net/sock.h
index d100b51839c6..934d6e8c301f 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1644,11 +1644,7 @@ void sock_gen_put(struct sock *sk);
 
 int __sk_receive_skb(struct sock *sk, struct sk_buff *skb, const int nested,
 		     unsigned int trim_cap);
-static inline int sk_receive_skb(struct sock *sk, struct sk_buff *skb,
-				 const int nested)
-{
-	return __sk_receive_skb(sk, skb, nested, 1);
-}
+int sk_receive_skb(struct sock *sk, struct sk_buff *skb, const int nested);
 
 static inline void sk_tx_queue_set(struct sock *sk, int tx_queue)
 {
diff --git a/net/core/sock.c b/net/core/sock.c
index 63c555388dcf..5ec6f1895f01 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -530,6 +530,12 @@ discard_and_relse:
 }
 EXPORT_SYMBOL(__sk_receive_skb);
 
+int sk_receive_skb(struct sock *sk, struct sk_buff *skb, const int nested)
+{
+	return __sk_receive_skb(sk, skb, nested, 1);
+}
+EXPORT_SYMBOL(sk_receive_skb);
+
 struct dst_entry *__sk_dst_check(struct sock *sk, u32 cookie)
 {
 	struct dst_entry *dst = __sk_dst_get(sk);
-- 
2.16.2

