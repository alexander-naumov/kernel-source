From: Jiri Slaby <jslaby@suse.cz>
Date: Wed, 10 Jan 2018 16:31:04 +0100
Subject: Revert "kaiser: vmstat show NR_KAISERTABLE as nr_overhead"
Patch-mainline: never, kabi
References: kabi

This reverts commit 3e3d38fd9832e82a8cb1a5b1154acfa43ac08d15 as it
breaks kABI by incrementing NR_VM_ZONE_STAT_ITEMS.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 arch/x86/mm/kaiser.c   |   16 +++++-----------
 include/linux/mmzone.h |    3 +--
 mm/vmstat.c            |    1 -
 3 files changed, 6 insertions(+), 14 deletions(-)

--- a/arch/x86/mm/kaiser.c
+++ b/arch/x86/mm/kaiser.c
@@ -148,11 +148,9 @@ static pte_t *kaiser_pagetable_walk(unsi
 		if (!new_pmd_page)
 			return NULL;
 		spin_lock(&shadow_table_allocation_lock);
-		if (pud_none(*pud)) {
+		if (pud_none(*pud))
 			set_pud(pud, __pud(prot | __pa(new_pmd_page)));
-			__inc_zone_page_state(virt_to_page((void *)
-						new_pmd_page), NR_KAISERTABLE);
-		} else
+		else
 			free_page(new_pmd_page);
 		spin_unlock(&shadow_table_allocation_lock);
 	}
@@ -168,11 +166,9 @@ static pte_t *kaiser_pagetable_walk(unsi
 		if (!new_pte_page)
 			return NULL;
 		spin_lock(&shadow_table_allocation_lock);
-		if (pmd_none(*pmd)) {
+		if (pmd_none(*pmd))
 			set_pmd(pmd, __pmd(prot | __pa(new_pte_page)));
-			__inc_zone_page_state(virt_to_page((void *)
-						new_pte_page), NR_KAISERTABLE);
-		} else
+		else
 			free_page(new_pte_page);
 		spin_unlock(&shadow_table_allocation_lock);
 	}
@@ -245,13 +241,11 @@ static void __init kaiser_init_all_pgds(
 	pgd = native_get_shadow_pgd(pgd_offset_k((unsigned long )0));
 	for (i = PTRS_PER_PGD / 2; i < PTRS_PER_PGD; i++) {
 		pgd_t new_pgd;
-		pud_t *pud = pud_alloc_one(&init_mm,
-					   PAGE_OFFSET + i * PGDIR_SIZE);
+		pud_t *pud = pud_alloc_one(&init_mm, PAGE_OFFSET + i * PGDIR_SIZE);
 		if (!pud) {
 			WARN_ON(1);
 			break;
 		}
-		inc_zone_page_state(virt_to_page(pud), NR_KAISERTABLE);
 		new_pgd = __pgd(_KERNPG_TABLE |__pa(pud));
 		/*
 		 * Make sure not to stomp on some other pgd entry.
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -131,9 +131,8 @@ enum zone_stat_item {
 	NR_SLAB_RECLAIMABLE,
 	NR_SLAB_UNRECLAIMABLE,
 	NR_PAGETABLE,		/* used for pagetables */
-	/* Second 128 byte cacheline */
 	NR_KERNEL_STACK,
-	NR_KAISERTABLE,
+	/* Second 128 byte cacheline */
 	NR_UNSTABLE_NFS,	/* NFS unstable pages */
 	NR_BOUNCE,
 	NR_VMSCAN_WRITE,
--- a/mm/vmstat.c
+++ b/mm/vmstat.c
@@ -736,7 +736,6 @@ const char * const vmstat_text[] = {
 	"nr_slab_unreclaimable",
 	"nr_page_table_pages",
 	"nr_kernel_stack",
-	"nr_overhead",
 	"nr_unstable",
 	"nr_bounce",
 	"nr_vmscan_write",
